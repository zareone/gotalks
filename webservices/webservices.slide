Web Services: Go for it!
Tags: web, services, golang, http, json

Daniel Blanco
Simplify Your Business
@zareone


* Prelude


* Web services

Go is a great language for building web services.

It has everything you need in the standard library:

- HTTP client / server (*net/http*)
- JSON encoding / decoding (*encoding/json*)
- XML encoding / decoding (*encoding/xml*)
- HTML templates (*html/template*)
- SMTP protocol (*net/smtp*)
- And many more...

* Our first HTTP server

Let's see an example of a minimal HTTP server...

.play webservices/http.go

Check: [[http://localhost:8080]]

* HTTP Handlers


* The HTTP Handler Interface

A fundamental piece of HTTP servers in Go is the *http.Handler* interface.

Any type that satisfies this interface can be registered as an HTTP handler to serve requests:

 type Handler interface {
   ServeHTTP(ResponseWriter, *Request)
 }


Note ResponseWriter is also an interface, not an actual type:

 type ResponseWriter interface {
   // Header returns the header map that will be sent by WriteHeader.
   Header() Header

   // Write writes the data to the connection as part of an HTTP reply.
   Write([]byte) (int, error)

   // WriteHeader sends an HTTP response header with status code.
   WriteHeader(int)
 }



* The HandlerFunc type

*http.HandlerFunc* type, can be used to adapt functions with the proper signature to satisfy the *Handler* interface:

 type HandlerFunc func(ResponseWriter, *Request)

 func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {
   f(w, r)
 }


* The HandlerFunc type

Example:

.play webservices/handlerfunc_example.go /START OMIT/,/END OMIT/



* Registering handlers to routes

We can use http.Handle and http.HandleFunc to register handlers to routes:

.play webservices/routes.go /START OMIT/,/END OMIT/


* Retrieving data (Part I)


* Data from URL path

Using the *http.Request.URL* object, we can access the data from the URL:

 type URL struct {
        Scheme   string
        Opaque   string    // encoded opaque data
        User     *Userinfo // username and password information
        Host     string    // host or host:port
        Path     string
        RawQuery string // encoded query values, without '?'
        Fragment string // fragment for references, without '#'
 }

A URL represents a parsed URL (technically, a URI reference). The general form represented is:

 scheme://[userinfo@]host/path[?query][#fragment]



* Data from URL path

Example:

.play webservices/urldata.go /START OMIT/,/END OMIT/

Check: [[http://localhost:8080/one/two/three]]


* Data from URL query

The *http.Request.URL* object has a *Query()* method that will parse the query string,
returning us a map of strings to *slice* of strings:

 type Values map[string][]string

Why a *slice*? Why not just a map of string / string?

Because we can have multiple values for the same parameter:

 /foo?param=val1&param=val2

* Data from URL query

Example:

.play webservices/urlquerydata.go /START OMIT/,/END OMIT/

Check: [[http://localhost:8080/movies?director=Ridley%20Scott&genre=SciFi&genre=Horror]]


* Rendering HTML

* Rendering HTML

Go includes the *html/template* package for safe (escaped) rendering of HTML templates.

.code webservices/template.go /START_TPL OMIT/,/END_TPL OMIT/

Variables and basic operations (if, if else, range, with...) are available inside templates, using tags in the form: *{{token}}*

As you can see *(.Now.Format)*, methods can be invoked, but omitting parentheses.


* Rendering HTML

When executing a template, an *io.Writer* and the context data (*interface{}*) should be provided:

.play webservices/template.go /START_HND OMIT/,/END_HND OMIT/

Check [[http://localhost:8080/?name=Gopher]]


* Posting form data


* Posting form data

Now that we have seen the basics of HTML rendering, let's make a simple form to upload files with some metadata:


* Upload HTTP handler:

.code webservices/file_upload.go /START_UPHAND OMIT/,/END_UPHAND OMIT/


* Storing uploads

We are using a struct type called File to represent a uploaded file.

We also define a map from string to *File (pointer to File) where we will store uploads.

This is not a good approach, and it's only for demo purposes.

.code webservices/file_upload.go /START_FILES OMIT/,/END_FILES OMIT/


* Uploading a file

.code webservices/file_upload.go /START_UPLOAD OMIT/,/END_UPLOAD OMIT/


* Downloading the uploaded file

_"What_goes_up_must_come_down."_
- Isaac Newton


.code webservices/file_upload.go /START_DOWNLOAD OMIT/,/END_DOWNLOAD OMIT/
* Let's go!

OK, enough code for now. Let's see if this actually works:

.play webservices/file_upload.go /START_MAIN OMIT/,/END_MAIN OMIT/

Check [[http://localhost:8080]]

* It worked! (I hope)

Let's have a look at the HTML template to see iteration (range) in action:

.code webservices/file_upload.go /\<tbody/,/\<\/tbody/


* JSON


* JSON data marshaling

The "encoding/json" package defines the Marshaler interface, used to generate textual representations of data types:

 type Marshaler interface {
         MarshalJSON() ([]byte, error)
 }

We can implement this interface in our custom types if we need any special behavior when marshaling.

* Custom type marshaling

Here we implement json.Marshaler interface for our custom type "rate" by defining the MarsalJSON() method:

.code webservices/json_marshal.go /START_RATE OMIT/,/END_RATE OMIT/

* Custom type marshaling

Let's define a slice of languages:

.code webservices/json_marshal.go /START_LANGS OMIT/,/END_LANGS OMIT/

* Writing JSON in the response

And see it in action!

.play webservices/json_marshal.go /START_HANDLER OMIT/,/END_HANDLER OMIT/

Check: [[http://localhost:8080]]

* A better way to do it

In the previous example, we marshalled our data in a slice of bytes, and then wrote them in the response body.

But there's another way to do it (the "streaming approach") based on the ubiquitous *io.Writer* interface, which every *http.ResponseWriter* happens to implement:

.code webservices/json_marshal_stream.go /START_HANDLER OMIT/,/END_HANDLER OMIT/


* Handling JSON requests

Let's see how to accept JSON data and decode it in our web service.

We'll issue a POST request against a URL where we will get the total amount of a imaginary purchase.

This is an example of the JSON data we should send in the request payload:

.code webservices/basket.json

The web service will return a JSON with the total amount of the basket.


* Handling JSON requests

.play webservices/basket.go /START_HANDLER OMIT/,/END_HANDLER OMIT/


* Using custom HTTP handlers 

The standard HTTP handler interface offered by Go is minimal and effective, as most things in the language.

But sometimes, we find ourselves repeating the same operations in every single handler:

- Retrieve user session (if on a stateful web service)
- Fork / copy the database connection for the request
- Handling errors and writing appropiate HTTP responses

To reduce the boilerplate code, we can define a custom handler signature, and an adapter to the standard http.Handler interface.

* Using custom HTTP handlers

.code webservices/custom_handlers.go /START_CUSTOM_HANDLER OMIT/,/END_CUSTOM_HANDLER OMIT/


* Using custom HTTP handlers

.code webservices/custom_handlers.go /START_MAIN OMIT/,/END_MAIN OMIT/

* TODO:

- Separation of concerns (http as an interface to the model)

* Useful libraries

- Request muxers / routers
- HTTP Middleware
- Template engines
- Database connectors
- JSON marshaling / unmarshaling
- Web Frameworks
- Response buffering
- Sessions
- Caching

* References

http://godoc.org/golang.org/x/tools/present
https://code.google.com/p/go/source/browse/2012/chat.slide?repo=talks
